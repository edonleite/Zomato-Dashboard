# ==================================================
# Bibliotecas Necess√°rias
# ==================================================
import pandas as pd
import plotly as pl
import haversine as hs
import inflection
import numpy as np
import plotly.express as px
import folium 
import streamlit as st
from folium.plugins import MarkerCluster
from streamlit_folium import folium_static
from PIL import Image 


#-------------------------------------In√≠cio das Fun√ß√µes-----------------------------------

st.set_page_config(page_title='Vis√£o Cidades', page_icon='üèô', layout='wide') 

# ==================================================
# Fun√ß√µes
# ==================================================
def ped_online(df):      
    
    """ Est√° fun√ß√£o tem a responsabilidade de preenchimento das cidades com maior quantidade de pedidos on-line. 
        Conte√∫do:
        1- colocar o nome dos restaurantes registrados com maior quantidade de pedidos on-line com base no c√≥digo de cadas cidades.
    """                       
    media_acima=df['has_online_delivery'] == 1

    df=(df.loc[media_acima, ['city','country', 'restaurant_id']].groupby(['city','country','restaurant_id'])
                .count().reset_index())

    df=(df.loc[:,['city','country', 'restaurant_id']].groupby(['city','country'])
            .count().sort_values('restaurant_id', ascending=False ).reset_index())

    fig=(px.bar(df, x='city', y='restaurant_id', title='Cidades com maior quantidade pedidos on-line',text_auto=True, color='country', 
    labels={'restaurant_id':'Quantidade de Restaurantes', 'city':'Cidades', 'country' : 'Pa√≠s'}))

    fig.update_traces(textfont_size=10, textangle=1, textposition="outside", cliponaxis=False, textfont_color='black') 
    
    return fig

    
def qnt_ent(df):
    
    """ Est√° fun√ß√£o tem a responsabilidade de preenchimento das cidades com maior quantidade de entregas. 
        Conte√∫do:
        1- colocar o nome dos restaurantes registrados com maior quantidade de entregas com base no c√≥digo de cadas cidades.
    """                
    media_acima=df['is_delivering_now'] == 1

    df=df.loc[media_acima, ['city','country', 'restaurant_id']].groupby(['city','country','restaurant_id']).count().reset_index()

    df=(df.loc[:,['city','country', 'restaurant_id']].groupby(['city','country'])
            .count().sort_values('restaurant_id', ascending=False ).reset_index())

    fig=(px.bar(df, x='city', y='restaurant_id', title='Cidades com maior quantidade de entregas',text_auto=True, color='country', 
    labels={'restaurant_id':'Quantidade de Restaurantes', 'city':'Cidades', 'country' : 'Pa√≠s'}))

    fig.update_traces(textfont_size=10, textangle=1, textposition="outside", cliponaxis=False, textfont_color='black') 
    
    return fig


def faz_rev(df):
    
    """ Est√° fun√ß√£o tem a responsabilidade de preenchimento dos melhores restaurantes por cidades que fazem reservas. 
        Conte√∫do:
        1- colocar o nome dos restaurantes registrados com m√©dis acima de 2.5 com base no c√≥digo de cada cidades.
    """            
    reservas=df['has_table_booking'] ==1
    
    df=(df.loc[reservas, ['city','country', 'restaurant_id']].groupby(['city', 'country', 'restaurant_id'])
             .count().reset_index())

    df=(df.loc[:,['city', 'country', 'restaurant_id']].groupby(['city', 'country'])
            .count().sort_values('restaurant_id', ascending=False ).reset_index())

    fig=(px.bar(df, x='city', y='restaurant_id', title='Melhores restaurantes por cidades que fazem reservas',text_auto=True, color='country', 
    labels={'restaurant_id':'Quantidade de Restaurantes', 'city':'Cidades', 'country' : 'Pa√≠s'}))

    fig.update_traces(textfont_size=10, textangle=1, textposition="outside", cliponaxis=False, textfont_color='black') 
    
    return fig


def   med_acima2 (df):
        
    """ Est√° fun√ß√£o tem a responsabilidade de Ppreenchimento da quantidade 8 melhores restaurantes na m√©dia de avalia√ß√£o acima 2.5. 
        Conte√∫do:
        1- colocar o nome dos restaurantes registrados com m√©dis acima de 2.5 com base no c√≥digo de cada cidades.
    """            
    media_acima=df['aggregate_rating'] >=2.5

    df=df.loc[media_acima, ['city','country', 'restaurant_id']].groupby(['city','country','restaurant_id']).count().reset_index()

    df=(df.loc[:,['city','country', 'restaurant_id']].groupby(['city','country'])
            .count().sort_values('restaurant_id', ascending=False ).reset_index()).head(8)

    fig=(px.bar(df, x='city', y='restaurant_id', title='8 Melhores restaurantes na m√©dia de avalia√ß√£o acima 2.5',text_auto=True, color='country', 
    labels={'restaurant_id':'Quantidade deRrestaurantes', 'city':'Cidades', 'country' : 'Pa√≠s'}))

    fig.update_traces(textfont_size=10, textangle=1, textposition="outside", cliponaxis=False, textfont_color='black') 

    return fig


def   med_acima4 (df):
    
    """ Est√° fun√ß√£o tem a responsabilidade de preenchimento da quantidade 8 melhores restaurantes na m√©dia de avalia√ß√£o acima 4.0. 
        Conte√∫do:
        1- colocar o nome dos restaurantes registrados com m√©dis acima de 4.0 com base no c√≥digo de cada cidades.
    """            
    media_acima=df['aggregate_rating'] >= 4.0

    df=(df.loc[media_acima, ['city','country', 'restaurant_id']]
            .groupby(['city','country','restaurant_id']).count().reset_index())

    df=(df.loc[:,['city','country', 'restaurant_id']].groupby(['city','country'])
            .count().sort_values('restaurant_id', ascending=False ).reset_index()).head(8)

    fig=(px.bar(df, x='city', y='restaurant_id', title='8 Melhores restaurantes na m√©dia de avalia√ß√£o acima 4.0',text_auto=True, color='country', 
    labels={'restaurant_id':'Quantidade de Restaurantes', 'city':'Cidades', 'country' : 'Pa√≠s'}))

    fig.update_traces(textfont_size=10, textangle=1, textposition="outside", cliponaxis=False, textfont_color='black') 
    
    return fig
    

def qnt_rest_cid (df):
    
    """ Est√° fun√ß√£o tem a responsabilidade de preenchimento da quantidade de restaurantes registradas por cidades. 
        Conte√∫do:
        1- colocar o nome dos restaurantes registrados com base no c√≥digo de cada cidades.
    """        
    df=(df.loc[:,['city','restaurant_id','country']].groupby(['city','restaurant_id','country'])
            .count().reset_index())

    df=(df.loc[:,['city','restaurant_id','country']].groupby(['city', 'country' ])
            .count().sort_values('restaurant_id', ascending=False ).reset_index())

    fig=(px.bar(df, x='city', y='restaurant_id',color='country', title='Quantidade de restaurantes registrados por cidades', text_auto=True, 
    labels={'restaurant_id': 'Total de Restaurantes', 'city': 'Cidades', 'country': 'Pa√≠s'}))

    fig.update_traces(textfont_size=10, textangle=1, textposition="outside", cliponaxis=False, textfont_color='black')  
    
    return fig 


def country_name(country_id):
    
    """ Est√° fun√ß√£o tem a responsabilidade de preenchimento do nome dos pa√≠ses. 
        Conte√∫do:
        1- colocar o nome dos pa√≠ses com base no c√≥digo de cada pa√≠s.
    """    
    COUNTRIES={
    1: "India",
    14: "Australia",
    30: "Brazil",
    37: "Canada",
    94: "Indonesia",
    148: "New Zeland",
    162: "Philippines",
    166: "Qatar",
    184: "Singapure",
    189: "South Africa",
    191: "Sri Lanka",
    208: "Turkey",
    214: "United Arab Emirates",
    215: "England",
    216: "United States of America",}
    
    return COUNTRIES[country_id]


def create_price_type(price_range):
    
    """ Est√° fun√ß√£o tem a responsabilidade de criar o tipo de categoria de comida. 
        Conte√∫do:
        1- Criar a categoria do tipo de comida com base no range de valores.
    """        
    if price_range == 1:
        return "cheap"
    elif price_range == 2:
        return "normal"
    elif price_range == 3:
        return "expensive"
    else:
        return "gourmet"
    
def rename_columns(dataframe):
        
    """ Est√° fun√ß√£o tem a responsabilidade de renomear as colunas do dataframe. 
    Conte√∫do:
    1- Para renomear as colunas do dataframe.
    """    
    df=dataframe.copy()
    title=lambda x: inflection.titleize(x)
    snakecase=lambda x: inflection.underscore(x)
    spaces=lambda x: x.replace(" ", "")
    cols_old=list(df.columns)
    cols_old=list(map(title, cols_old))
    cols_old=list(map(spaces, cols_old))
    cols_new=list(map(snakecase, cols_old))
    df.columns=cols_new
    
    return df

def color_name(color_code):
    
    """ Est√° fun√ß√£o tem a responsabilidade de criar o do nome das Cores. 
    Conte√∫do:
    1- Criar o nome das cores com base nos c√≥digos de cores.
    """    
    COLORS={
    "3F7E00": "darkgreen",
    "5BA829": "green",
    "9ACD32": "lightgreen",
    "CDD614": "orange",
    "FFBA00": "red",
    "CBCBC8": "darkred",
    "FF7800": "darkred",}

    return COLORS[color_code]


def clean_code(df):
    
    """ Est√° fun√ß√£o tem a responsabilidade de limpar o dataframe. 
    
        Tipos de Limpesa:
        1- Utilizando para renomear e substituir espa√ßo por underline;
        2- Utilizando para criar a coluna com o nome dos pa√≠ses baseado nos c√≥digos e na fun√ß√£o country_name;
        3- Criando a coluna com os nomes das cores da avalia√ß√£o;
        4- Criando a coluna com os nomes dos tipos de pre√ßo de comida (barato, normal e etc);
        5- Removendo as linhas com NAs;
        6- Todos os restaurantes somente por um tipo de culin√°ria.
        
        Imput: Dataframe.
        Output: Dataframe.   
    """  
    df=rename_columns(df)
    
    df['country']=df.loc[:, 'country_code'].apply(lambda x: country_name(x)) 
    
    df['color_rating_name']=df.loc[:, 'rating_color'].apply(lambda x: color_name(x)) 
    
    df['price_type']=df.loc[:, 'price_range'].apply(lambda x: create_price_type(x)) 
    
    df=df.dropna() 
    df=df.drop_duplicates()
    
    df["cuisines"]=df.loc[:, "cuisines"].astype(str).apply(lambda x: x.split(",")[0])
    
    return df
   
#---------------------------In√≠cio da Estrutura l√≥gica do c√≥digo----------------------------

# ==================================================
# Import dataset
# ==================================================
df=pd.read_csv(r'dataset/zomato.csv')

# ==================================================
# Limpando os dados
# ==================================================
df=clean_code(df)

# ==================================================
# Barra Lateral
# ==================================================
image=Image.open('cidade.jpg')
st.sidebar.image(image, width=250)

st.sidebar.title('Zomato Restaurants')
st.sidebar.subheader('For the love of Food')
st.sidebar.subheader('', divider='gray')

st.sidebar.subheader('Selecione os pa√≠ses que deseja analisar:')

paises=st.sidebar.multiselect(
    "Selecione o  pa√≠s:",
    df.loc[:, "country"].unique().tolist(),     
    default=["Brazil", "Canada", "Indonesia", "New Zeland", "Philippines", "Qatar", "South Africa", "United Arab Emirates" ])

st.sidebar.subheader('', divider='gray')
st.sidebar.subheader('Powered by: Edon Gomes Leite')

#Filtro de Pa√≠ses
todos_paises=df['country'].isin(paises) 
df=df.loc[todos_paises, :]

# ==================================================
# Layout no Streamliy
# ==================================================
st.title('Vis√£o de Neg√≥cio - Cidades')
st.subheader('', divider='gray') 

st.subheader('Informa√ß√µes √∫teis para tomadas de decis√µes de neg√≥cio com base nas cidades:')
st.subheader('', divider='gray')

with st.container():
    fig=qnt_rest_cid(df)
    st.plotly_chart(fig, use_container_width=True)
        
st.subheader('', divider='gray')

with st.container():
    col1, col2=st.columns(2)
        
    with col1:        
        fig=med_acima4(df)
        st.plotly_chart(fig, use_container_width=True)
        
    with col2: 
        fig=med_acima2(df)
        st.plotly_chart(fig, use_container_width=True)   
           
st.subheader('', divider='gray')
        
with st.container():
    fig=faz_rev(df)
    st.plotly_chart(fig, use_container_width=True)
    
st.subheader('', divider='gray')
    
with st.container():
    col1, col2=st.columns(2)
        
    with col1: 
        fig=qnt_ent(df)
        st.plotly_chart(fig, use_container_width=True)   
        
    with col2:
        fig=ped_online(df)
        st.plotly_chart(fig, use_container_width=True)